<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sistema de Chamada de Pacientes</title>
    <style>
      body {
        font-family: "Arial", sans-serif;
        margin: 0;
        padding: 0;
        display: flex;
        height: 100vh;
        background-color: #f5f5f5;
      }

      .container {
        display: flex;
        width: 100%;
      }

      .destaque {
        flex: 3;
        background-color: #2c3e50;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 20px;
        text-align: center;
      }

      .historico {
        flex: 1;
        background-color: #ecf0f1;
        padding: 20px;
        overflow-y: auto;
      }

      .paciente-atual {
        font-size: 3.5em;
        margin-bottom: 20px;
        font-weight: bold;
      }

      .sala-atual {
        font-size: 2.5em;
        color: #f1c40f;
      }

      .titulo-historico {
        font-size: 1.5em;
        margin-bottom: 20px;
        color: #2c3e50;
        border-bottom: 2px solid #2c3e50;
        padding-bottom: 10px;
      }

      .lista-pacientes {
        list-style-type: none;
        padding: 0;
      }

      .item-paciente {
        background-color: white;
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
      }

      .nome-paciente {
        font-weight: bold;
      }

      .sala-paciente {
        color: #e74c3c;
      }

      .hora-chamada {
        color: #7f8c8d;
        font-size: 0.8em;
      }
    </style>
  </head>
  <body>
    <div id="app" class="container">
      <div v-if="iniciar!=true" class="destaque">
        <button @click="InciarChamada()" style="height: 60px; font-size: large;">Iniciar reprodução de áudio</button>
      </div>
      <div v-if="iniciar==true" class="destaque">
        <div class="paciente-atual">{{Paciente}}</div>
        <div class="sala-atual">{{Sala}}</div>
      </div>

      <div v-if="iniciar==true" class="historico">
        <div class="titulo-historico">Últimos Pacientes Chamados</div>
        <ul class="lista-pacientes" v-for="(log, index) in logs" :key="index">
          <li class="item-paciente">
            <div>
              <span class="nome-paciente">{{log.Paciente}}</span>
              <!--<div class="hora-chamada">00:00:00</div>-->
            </div>
            <span class="sala-paciente">{{log.Sala}}</span>
          </li>
        </ul>
      </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.14/vue.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue-resource/1.5.3/vue-resource.min.js"></script>
    <script>
      var vm = new Vue({
        el: "#app",
        data() {
          return {
            iniciar: false,
            logs: [],
            Paciente: null,
            Sala: null,
            intervalId: null,
            re: 0,
          };
        },
        methods: {
          async InciarChamada() {
            this.iniciar = true;
            this.carregarUltimasAtividades();
            this.intervalId = setInterval(async () => {
              this.carregarUltimasAtividades();
            }, 5000);
          },

          async carregarUltimasAtividades() {
            try {
              this.$http
                .get("api/PacienteChamada/" + this.re)
                .then(function (res) {
                  const response = res.body;
                  if (
                    response.length > 0 &&
                    response[0].Paciente !== this.Paciente
                  ) {
                    this.Paciente = response[0].Paciente;
                    this.Sala = response[0].Sala;
                    var sintese = new SpeechSynthesisUtterance(this.Paciente);
                    sintese.lang = "pt-BR";
                    window.speechSynthesis.speak(sintese);

                    sintese = new SpeechSynthesisUtterance(this.Sala);
                    sintese.lang = "pt-BR";
                    window.speechSynthesis.speak(sintese);
                  }
                  this.logs = response;
                });
            } catch (error) {
              console.error("Error loading activities:", error);
            }
          },
        },
        async mounted() {
          var regex = /[?&]([^=#]+)=([^&#]*)/g,
            url = window.location.href,
            params = {},
            match;
          while ((match = regex.exec(url))) {
            params[match[1]] = match[2];
          }
          if (params.re != undefined) {
            this.re = params.re;
          }
        },
        beforeUnmount() {
          if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
          }
        },
      });
    </script>
  </body>
</html>
